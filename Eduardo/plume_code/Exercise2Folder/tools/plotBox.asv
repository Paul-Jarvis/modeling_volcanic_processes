function table = plotBox(s0, t, z, angles, v, radii, vent_height)
% h0 is the initial length of the box
% velox is the velocity along the axis (not to be confused with velocity
% projection on z-axis)

    s0 = s0+vent_height;
    s1(1) = vent_height;
    s2(1) = s0;
    z1_mem(1) = vent_height;
    z2_mem(1) = s0*sin(angles(1)); 
    v1_mem(1) = interp1(z,v,z1_mem(1),'linear','extrap');
    v2_mem(1) = interp1(z,v,z2_mem(1),'linear','extrap');

    % Here generic times at which evaluate volumes are defined
    t_end = 100;
    N = 20;
    generic_times = linspace(0, t_end, N);
    
    % Here I pass from the position on the z axis to the position along the s line
    s = z./sin(angles);
    
    % Correggiamo il tempo iniziale per il punto h2
    offset = interp1(s,t,s0,'linear','extrap')
    t1 = 0;
    t2 = offset;
    
    for i = 1:length(generic_times)-1
        dt = generic_times(i+1)-generic_times(i);
        
        s1(i+1) = interp1(t,s,t1+dt,'linear','extrap');
        z1_mem(i+1) = interp1(t,z,t1+dt,'linear','extrap');
        v1_mem(i+1) = interp1(z,v,z1_mem(i+1),'linear','extrap');
        
        s2(i+1) = interp1(t,s,t2+dt,'linear','extrap');
        z2_mem(i+1) = interp1(t,z,t2+dt,'linear','extrap');
        v2_mem(i+1) = interp1(z,v,z2_mem(i+1),'linear','extrap');
        
        t1 = t1+dt;
        t2 = t2+dt;
    end
    
    table(:,1) = generic_times;
    table(:,2) = s1;
    table(:,3) = s2;
%     diff1 = s2-s1;
%     diff2 = z2_mem-z1_mem;
%     table(:,1) = generic_times;
%     table(:,2) = s1;
%     table(:,3) = s2;
%     table(:,4) = z1_mem;
%     table(:,5) = z2_mem;
%     table(:,6) = diff1;
%     table(:,7) = diff2;
%     table(:,8) = v1_mem;
%     table(:,9) = v2_mem;
%     table(:,10) = v1_mem-v2_mem;
    
    min_x = 0;
    max_x = 0;
    max_z = 0;
    max_x_plot = 0;
    min_x_plot = 0;
    max_z_plot = 0;
    min_z_plot = 0;
    
    for i = 1:length(generic_times)       
        angle_iter1(i) = interp1(z,angles,z1_mem(i),'linear','extrap');
        center_z1(i) = z1_mem(i); 
        center_x1(i) = z1_mem(i)*cos(angle_iter1)/sin(angle_iter1);
        center_y1(i) = 0;
        center1(i,:) = [center_x1(i) center_y1(i) center_z1(i)];
        normal1(i,:) = [cos(angle_iter1(i)) 0 sin(angle_iter1(i))];
        radius1(i) = interp1(z,radii,z1_mem(i),'linear','extrap');
        
        angle_iter2(i) = interp1(z,angles,z2_mem(i),'linear','extrap');
        center_z2(i) = z2_mem(i); 
        center_x2(i) = z2_mem(i)*cos(angle_iter2)/sin(angle_iter2);
        center_y2(i) = 0;
        center2(i,:) = [center_x2(i) center_y2(i) center_z2(i)];
        normal2(i,:) = [cos(angle_iter2(i)) 0 sin(angle_iter2(i))];
        radius2(i) = interp1(z,radii,z2_mem(i),'linear','extrap');
       
        if (round(center_x1(i))<=min_x)
            min_x = center_x1(i);
            min_x_plot = min_x-abs(radius1(i)*sin(angle_iter1(i)));
        end
        
        if (center_x1(i)>max_x)
            max_x = center_x1(i);
            max_x_plot = max_x+abs(radius1(i)*sin(angle_iter1(i)));
        end
        
        if (center_z1(i)>max_z)
            max_z = center_z1(i);
            max_z_plot = max_z+abs(radius1(i)*cos(angle_iter1(i)));
        end
    end
    
    max_y_plot = max(radius1);
    min_y_plot = -max(radius1);
    
    % This useless for is just to have the borders of the plot in
    % authomatic
    color_vector = linspace(0.15,0.90,length(generic_times));
%     color_vector = linspace(0.95,0.95,length(generic_times));
 
    % Get parameters
    [vertexes, fill_vertexes] = drawVolcano(radii(1), vent_height)    

    figure(234122)
    for i = 1:length(generic_times)    
       
        % Plot volcano
        patch('vertices',vertexes,'faces',fill_vertexes,'facecolor',[0.8 0.5 0]); 
        hold on;
        plotCircle3D(center1(i,:),normal1(i,:),radius1(i),color_vector(i));
        hold on;
        plotCircle3D(center2(i,:),normal2(i,:),radius2(i),color_vector(i));
        
        xlim([-1000 ]);
        ylim([min_y_plot max_y_plot]);
        zlim([min_z_plot max_z_plot]);
        
%         xlim([min_x_plot max_x_plot]);
%         ylim([min_y_plot max_y_plot]);
%         zlim([min_z_plot max_z_plot]);
%         axis equal
        view([-30 10]);
        pause(0.1); 
        hold off
    end
      
end

function plotCircle3D(center,normal,radius, color)
% This function plots a circle

    theta=0:0.01:2*pi;
    v = null(normal);
    points = repmat(center',1,size(theta,2))+radius*(v(:,1)*cos(theta)+v(:,2)*sin(theta));
    fill3(points(1,:), points(2,:), points(3,:), [color, color, color])
%     plot3(points(1,:),points(2,:),points(3,:),'r-');
    xlabel('x');
    ylabel('y');
    zlabel('z');

end